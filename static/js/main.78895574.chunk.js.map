{"version":3,"sources":["components/Line.js","components/Input.js","commands.js","messages.js","App.js","serviceWorker.js","index.js"],"names":["Line","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","path","line","React","createRef","react_default","a","createElement","className","ref","children","Component","cmd","cmdInput","handleChange","bind","assertThisInitialized","handleKeyUp","current","focus","event","setState","target","value","e","keyCode","typing","readOnly","onChange","onKeyUp","maxLength","commands","dir","messages","App","lines","complete","launchDiv1","launchDiv2","welcome","timeout","innerHTML","text","div","textArray","split","i","length","ms","Promise","resolve","setTimeout","_this2","concat","toConsumableArray","type","trim","_this3","map","item","index","component","components_Line","key","Input","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78895574.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Line extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { path: this.props.path || 'C:\\\\' }\n    this.line = React.createRef()\n  }\n\n  render() {\n    return (\n      <div className=\"line\" ref={this.line}>\n        <span>{ this.state.path }></span>\n        { this.props.children }\n      </div>\n    );\n  }\n}\n\nexport default Line\n","import React, { Component } from 'react'\n\nclass Line extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { cmd: this.props.cmd }\n    this.cmdInput = React.createRef()\n\n    this.handleChange = this.handleChange.bind(this)\n    this.handleKeyUp = this.handleKeyUp.bind(this)\n  }\n\n   componentDidMount() {\n    if (this.cmdInput && this.cmdInput.current) {\n      this.cmdInput.current.focus()\n    }\n  }\n\n  handleChange (event) {\n    this.setState({ cmd: event.target.value })\n    this.props.handleChange(event.target.value)\n  }\n\n  handleKeyUp (e) {\n    if (e.keyCode === 13) {\n      this.setState({ cmd: '' })\n    }\n    this.props.typing(e)\n  }\n\n  render() {\n    return (\n      <input\n        readOnly={this.props.readOnly}\n        className=\"cmd\"\n        value={this.state.cmd}\n        ref={this.props.readOnly || this.cmdInput}\n        onChange={this.handleChange}\n        onKeyUp={this.handleKeyUp}\n        maxLength=\"64\"\n      />\n    );\n  }\n}\n\nexport default Line\n","export default {\n  dir: `\n  Volume in drive C is PCDOS5\n  Volume Serial Number is 3C54-16FE\n  Directory of C:\\\n\n\nDOS             <DIR>         11-07-08     3:30p\nPCE             <DIR>         11-07-08     3:30p\nUTIL            <DIR>         11-07-08     3:43p\nAUTOEXEC OLD              52  11-07-08     3:47p\nCOMMAND COM            47845  11-11-91     5:00p\nCONFIG SYS                82  10-17-03     4:43p\nCIV             <DIR>         10-18-13     4:08p\n           10 file(s)         48096 bytes\n                            1812480 bytes free\n  `\n}\n","export default {\n  launch1: 'Starting MS-DOS',\n  launch2: 'HIMEM is testing extended memory',\n  error: `Invalid drive in search path\nBad command or file name`\n}\n","import React, { Component } from 'react';\nimport Line from './components/Line'\nimport Input from './components/Input'\nimport './App.css';\nimport commands from './commands'\nimport messages from './messages'\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { lines: [], cmd: '', complete: false }\n\n    this.launchDiv1 = React.createRef()\n    this.launchDiv2 = React.createRef()\n    this.handleChange = this.handleChange.bind(this)\n    this.typing = this.typing.bind(this)\n    this.welcome = this.welcome.bind(this)\n  }\n\n  async componentDidMount() {\n    await this.welcome(messages.launch1, this.launchDiv1.current)\n    await this.welcome(messages.launch2, this.launchDiv2.current)\n    await this.timeout(500)\n    this.launchDiv2.current.innerHTML += ' done.'\n    await this.timeout(300)\n    this.setState({ complete: true })\n  }\n\n  async welcome (text, div) {\n    let textArray = text.split('')\n    for (let i = 0; i < textArray.length; ++i) {\n      await this.timeout(50)\n      div.innerHTML += textArray[i]\n    }\n    for (let i = 0; i < 3; ++i) {\n      await this.timeout(500)\n      div.innerHTML += '.'\n    }\n  }\n\n  timeout (ms) {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n\n  handleChange (value) {\n    this.setState({ cmd: value })\n  }\n\n  typing(e) {\n    if (e.keyCode === 13) {\n      this.setState({ lines: [...this.state.lines, { text: this.state.cmd, type: 'history' }] }, () => {\n        if (this.state.cmd.trim() === '') {\n          return\n        }\n        commands[this.state.cmd]\n        ? this.setState({ lines: [...this.state.lines, { text: commands[this.state.cmd], type: 'command' }] })\n        : this.setState({ lines: [...this.state.lines, { text: messages.error, type: 'error' }] })\n        this.setState({ cmd: '' })\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"launch\" ref={this.launchDiv1}></div>\n        <div className=\"launch\" ref={this.launchDiv2}></div>\n        { this.state.lines.map((item, index) => {\n          let component = null\n          switch (item.type) {\n            case 'history':\n              component = <Line key={index}>\n                <Input typing={this.typing} handleChange={this.handleChange} cmd={item.text} readOnly={true} />\n              </Line>\n              break\n            case 'command':\n              component = <pre key={index}>{item.text}</pre>\n              break\n            case 'error':\n              component = <pre key={index}>{item.text}</pre>\n              break\n            default:\n          }\n          return component\n        })}\n        { this.state.complete ?\n          <Line>\n            <Input typing={this.typing} handleChange={this.handleChange} cmd={this.state.cmd} />\n          </Line> : null\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}